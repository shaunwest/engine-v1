// given level data and keyboard/mouse input, compute the locations (and animation states)
// of the view, sprites, and backgrounds.

// transform data using mutation in a careful way

const DataStore = (data) => {
  const undos = [];

  return {
    modify: (todo, undo, value) => {
      todo(data, value); 
      undos.push(undo);
      return data;
    },

    undo: () => {
      const undo = undos.pop();
      if (!undo) return;
      undo(data);
      return data;
    },

    state: () => data
  };
};

// would this approach be better?
const Patcher = () => {
  const undos = [], pointer = 0; // <- will need for redo

  return {
    /*patchValue: (data, key, func) => {
      if (typeof value === 'object') throw 'ERROR! Must be non-object';
      undos.push(data, key, data[key]);
      data[key] = func();
    },*/
    patchValue: (data, key, value) => {
      if (typeof value === 'object') throw 'ERROR! Must be non-object';
      undos.push(data, key, value);
      data[key] = value;
    },
    patchNum: (data, key, func) => {
      if (typeof value !== 'number') throw 'ERROR! Must be number';
      undos.push(data, key, data[key]);
      data[key] += func();
    },
    undo: () => {
      const value = undos.pop(),
        key = undos.pop(),
        data = undos.pop();
      
      data[key] = value;   
      return data;
    }
  };
};



export const dataStore = DataStore({
  count: 0
});

export const dataStore2 = {
  foo: 'bar', 
  counts: { 
    count1: 0,
    count2: 0
  }
};

const patcher = Patcher();


//
const INCREMENT_COUNT = 'INCREMENT_COUNT';
const DECREMENT_COUNT = 'DECREMENT_COUNT';

/*
export const increment = () => ({
  type: INCREMENT_COUNT,
  amount: 1
});

export const decrement = () => ({
  type: DECREMENT_COUNT,
  amount: 1
});
*/

/*
export const increment = { type: INCREMENT_COUNT, func: add(1) };
export const decrement = { type: DECREMENT_COUNT, func: subtract(1) };
*/

export const increment = (dispatch) => dispatch(INCREMENT_COUNT, add(1));
export const decrement = (dispatch) => dispatch(DECREMENT_COUNT, subtract(1));

/*
const add = (state, amount) => state.count += amount;
const _add = (state, amount) => state.count -= amount;

const subtract = (state, amount) => state.count -= amount;
const _subtract = (state, amount) => state.count += amount;
*/

/*
const add = amount => amount;
const subtract = amount => -amount;
*/

const add = amount => state => state.counts.count1 + amount;
const subtract = amount => state => state.counts.count1 - amount;

/*
const counter = (data, action) => {
  switch(action.type) {
    case INCREMENT_COUNT:
      dataStore.modify(add, _add, action.amount);
      return; 
    case DECREMENT_COUNT:
      dataStore.modify(subtract, _subtract, action.amount);
      return;
  }
};
*/

/*
const main = (data, action) => {
  switch(action.type) {
    case INCREMENT_COUNT:
    case DECREMENT_COUNT:
      counter(data.counts, action);
      break;
  }
};

const counter = (data, action) => {
  switch(action.type) {
    case INCREMENT_COUNT:
      patcher.patchNum(data, 'count1', action.func);
      break; 
    case DECREMENT_COUNT:
      patcher.patchNum(data, 'count1', action.func);
      break;
  }
};
*/

const main = (data, type, value) => {
  switch(type) {
    case INCREMENT_COUNT:
    case DECREMENT_COUNT:
      counter(data.counts, type, value);
      break;
  }
};

const counter = (data, type, value) => {
  switch(type) {
    case INCREMENT_COUNT:
      patcher.patchValue(data, 'count1', value);
      break; 
    case DECREMENT_COUNT:
      patcher.patchValue(data, 'count1', value);
      break;
  }
};


const dispatcher = fn => fn((type, action) => main(dataStore2, type, action(dataStore2)));

dispatcher(increment);
console.log(dataStore2.counts.count1);

dispatcher(increment);
console.log(dataStore2.counts.count1);

/*
main(dataStore2, increment());
console.log(dataStore2);
main(dataStore2, increment());
console.log(dataStore2);
main(dataStore2, decrement());
console.log(dataStore2);
*/

/*counter(increment());
console.log(dataStore.state());
counter(increment());
console.log(dataStore.state());
counter(decrement());
console.log(dataStore.state());*/
